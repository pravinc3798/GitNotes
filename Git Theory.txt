Git is a version control system that records the changes made to the code over time in a special database call repository.
We can look at our repository and know who has made what changes, when and why. And if we screw something up, we can easily revert our project back to an earlier state.
Without a version control system, we have to constantly store the copies of the entire project in various folders. This is very slow and doesn't scale at all, especially if multiple people have work on same project.

So having a version control system, we can-
	1. Track History
	2. Work Together

There are two types of version control systems - Centralized and Distributed.

In a centralized system all team members connect to a central server to get the latest copy of the code and to share their changes with others.
Examples - Subversion and Microsoft Teams.
The problem with the centralized architecture is the single point of failure (if the server goes offline, we cannot collaborate or save the snapshots or our project, so we have to wait until the server comes back online.)

In distributed systems, every team member has a copy of project with its histroy on their machine, so we can save snapshots of our project locally on our machine.
Examples - Git and Mercurial.

Ways to use Git
	1. Command Line (most powerful way)
	2. Code editors and IDEs (essential features)
	3. GUI Tools (GitKraken And SourceTree)
	

--------GIT Workflow-------------

Let say we have a project directory (which contains code files) and also we have created an empty git repository in the same directory. (Git repository is actually a hidden sub directory in our project directory)

Now, lets says we have add or modified one or more files in our project directory and when our project reaches a state when we want to record, we commit those changes into our repository. (Creating a commit is like taking a snapshot of our project)

Now, in GIT we have a special area or a special intermediate step (that doesn't exists in most of the version control systems), it's called the STAGING AREA. It's essentially what we are proposing for the next commit. So when we done with the changes we add the modified files to the staging area, review our changes and if everything is good then we'll make a commit, the proposed snapshot will get permanently stored in our repository. 
So the staging area allows us to review our work before recording a snapshot, if some of the changes shouldn't be recorded as part of the !NEXT! snapshot we can unstage them and commit them as part of another snapshot.

git add - command adds the files to staging area.

git commit - command adds the files to the repository (we provide a meaningful message along with the commit, so that it becomes easy to track the changes later.)

After commiting the changes - THE STAGING AREA DOES NOT BECOME EMPTY. So what we have in the staging area is the same snapshot that we stored in the repository. If we change few files in our project directory we and simply add those files to staging area and commit - what it will do is that it will commit the changed files along with the files that were already present in the staging area. The commit message that is provided during the second commit will only reflect against the files that were modified or newly added.

----------Internal Git Working---------

Each commit contains a ID which is uniquely generated by git. Irs like a revision number.
Each commit also contains information about what was changed, by who, when as well as the complete snapshot of our project at the time it was commited.

Unlike most other version control systems git does not store the delta (only the part that was changed), it stores the complete content. With this it can quickly restore the project to an earlier snapshot without having to compute the changes.